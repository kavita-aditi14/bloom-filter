package com.bloomFilter;

import com.google.common.base.Objects;
import com.google.common.base.Preconditions;
import com.google.common.hash.HashCode;
import com.google.common.hash.HashFunction;
import com.google.common.hash.Hasher;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

/**
 * Utility class which is responsible for generating hash values which would be used to set bits in bit set.
 * @param <T>
 */
public class HashFunctionUtility<T> implements Serializable {
    private static final long serialVersionUID = -21409673447366115L;
    private final HashFunction hf;

    /**
     * Constructor for HashFunctionUtility
     *
     * @param hf hashing function.
     */
    public HashFunctionUtility(HashFunction hf) {
        this.hf = hf;
    }

    /**
     * Method which determines the hash code for an element.
     *
     * @param element element whose hash code needs to be determined.
     * @param i       seed value for hash function.
     * @return        hashcode.
     */
    public HashCode getHashCode(T element, int i) {
        Preconditions.checkArgument(element != null, "Element is null.");
        Hasher hasher = hf.newHasher(i);
        byte[] bytes = element.toString().getBytes();
        return hasher.putBytes(bytes).hash();
    }

    /**
     * Method which determines k values for an element.
     *
     * @param element Element for whom we need to determine k values.
     * @param k       Number of discrete values we need to determine.
     * @return        List of k hash values.
     */
    List<Integer> getKDiscreteValues(T element, Integer k) {

        //convert byte array to bit set
        List<Integer> kValues = new ArrayList<Integer>();
        for (int i = 0; i < k; i++) {
            int val = getHashCode(element, i).asInt();
            int num = val > 0 ? val : -1 * val;
            kValues.add(num);
        }
        return kValues;
    }

    /**
     * Method which determines k normalized discrete values.
     *
     * @param element     Element for whom we need to determine k values.
     * @param k           number of hash functions
     * @param upperBound  upper bound for return value. This is governed by the number of bits in bit sets.
     * @return            list of values for k hash functions.
     */
    public List<Integer> getNormalizedKDiscreteValues(T element, Integer k, int upperBound) {
        Preconditions.checkArgument(upperBound > 0, "upper bound (%s) should be greater than 0",  upperBound);
        Preconditions.checkArgument(element != null, "Element is null.");
        Preconditions.checkArgument(k > 0, "k (%s) should be greater than  0", k);
        List<Integer> kValues = getKDiscreteValues(element, k);
        List<Integer> normalizedKValues = new ArrayList<Integer>();
        for (Integer kValue : kValues) {
            normalizedKValues.add(normalizedValue(kValue, 0, upperBound));
        }
        return normalizedKValues;
    }

    /**
     * Method which ensures that the value exists between lower and upper bound.
     * @param value      value
     * @param lowerBound lowerbound for value
     * @param upperBound upperbound for value
     * @return  new value which is present between lower and upper bound
     */
    int normalizedValue(Integer value, int lowerBound, int upperBound) {
        Preconditions.checkArgument(lowerBound < upperBound, "lower bound (%s) should be less than upper bound (%s)", lowerBound, upperBound);
        return lowerBound + (value % (upperBound - lowerBound));
    }

    @Override
    public boolean equals(final Object obj) {
        if(obj == this) return true;
        if(obj == null) return false;

        if (getClass() != obj.getClass()) {
            return false;
        }
        final HashFunctionUtility other = (HashFunctionUtility) obj;
        return Objects.equal(this.hf, other.hf);
    }

    @Override
    public int hashCode() {
        return Objects.hashCode(this.hf);
    }
}
